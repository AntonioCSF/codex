#! /usr/bin/python3

import MySQLdb
import sys


def accepted_msg():
    print("Accepted", file=sys.stderr)


def wrong_answer_msg(msg):
    print("Wrong Answer", file=sys.stderr)
    print(msg)


def runtime_error_msg(e: MySQLdb.Error):
    scope = (" [on: answer]" if e.scope == "answer" else "") if hasattr(e, 'scope') else " [on: system]"
    print("Runtime Error", file=sys.stderr)
    print("%s (error %d)%s" % (e.args[1], e.args[0], scope))


def compile_error_msg(e: MySQLdb.Error):
    scope = (" [on: answer]" if e.scope == "answer" else "") if hasattr(e, 'scope') else " [on: system]"
    print("Compile Error", file=sys.stderr)
    print("%s (error %d)%s" % (e.args[1], e.args[0], scope))


def eval_queries(conn, q1, q2):
    c1 = conn.cursor()
    c2 = conn.cursor()

    try:
        c2.execute(q2)
    except MySQLdb.Error as e:
        e.scope = "submission"
        raise e
    try:
        c1.execute(q1)
    except MySQLdb.Error as e:
        e.scope = "answer"
        raise e

    if len(c1.description) != len(c2.description):
        wrong_answer_msg("Expecting %d columns, got %d." % (len(c1.description), len(c2.description)))
    elif c1.rowcount != c2.rowcount:
        wrong_answer_msg("Expecting %d rows, got %d." % (c1.rowcount, c2.rowcount))
    else:
        rc = c1.rowcount
        cc = len(c1.description)
        for i in range(rc):
            r1 = c1.fetchone()
            r2 = c2.fetchone()
            for j in range(cc):
                if r1[j] != r2[j]:
                    wrong_answer_msg("Wrong value on row %d, line %d." % (i + 1, j + 1))
                    break
            else:
                continue
            break
        else:
            accepted_msg()

    c1.close()
    c2.close()


def main(host, port, user, passwd, db, q1, q2, q1_is_file=False, q2_is_file=False):
    try:
        conn = MySQLdb.connect(host=host, port=port, user=user, passwd=passwd, db=db, connect_timeout=1)
        if q1_is_file:
            with open(q1, "r") as f:
                q1 = f.read()
        if q2_is_file:
            with open(q2, "r") as f:
                q2 = f.read()
        eval_queries(conn, q1, q2)
        conn.close()
    except MySQLdb.Error as e:
        if e.args[0] in (1064, 1065):
            compile_error_msg(e)
        else:
            runtime_error_msg(e)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Evaluate SQL query 2 against query 1.')
    parser.add_argument('--host', dest='host', type=str, default="localhost")
    parser.add_argument('--port', dest='port', type=int, default=3306)
    parser.add_argument('--user', dest='user', type=str, default="")
    parser.add_argument('--passwd', dest='passwd', type=str, default="")
    parser.add_argument('--db', dest='db', type=str, default="")
    parser.add_argument('--query1-is-file', dest='q1_is_file', action='store_true', default=False)
    parser.add_argument('--query2-is-file', dest='q2_is_file', action='store_true', default=False)
    parser.add_argument('query1', type=str)
    parser.add_argument('query2', type=str)
    args = parser.parse_args()

    main(args.host, args.port, args.user, args.passwd, args.db, args.query1, args.query2, args.q1_is_file,
         args.q2_is_file)
