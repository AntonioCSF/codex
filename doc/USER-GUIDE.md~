
# Codex User Guide

Pedro Vasconcelos, January 2017.

## Pages

Codex repositories are organized into *pages*.
A page can contain formated
text, links, images, mathematics, etc.

Codex pages are simple text files with the `.md` extension;
markdown annotations are used for formating.
Here is an example text:

~~~~{style="background:#f0f0f0;"}
# This is a header

## This is a sub-header

This is the first paragraph. This sentence shows *emphasis* and
**strong emphasis** and `inline-code style`.

This is another paragraph with an itemized list:

1. first item;
2. second item;
3. last item.

~~~{.python}
# a verbatim code block (with Python highlighting)
def dist(x, y):
   return sqrt(x*x + y*y)
~~~

This is a link to [Google's home page](http://www.google.com).

You can also include LaTeX mathematics either 
inline $h = \sqrt{x^2+y^2}$ or as displayed equations:
$$ erf(x) = \frac{1}{\sqrt{x}}\int_{-x}^x e^{-t^2} dt\,. $$
~~~~

The above renders as follows:

<div style="background:#f0f0f0">
> # This is a header
>
> ## This is a sub-header
>
> This is the first paragraph. This sentence shows *emphasis* and
> **strong emphasis** and `inline-code style`.
>
> This is another paragraph with an itemized list:
>
> 1. first item;
> 2. second item;
> 3. last item.
> 
> ~~~{.python}
> # a verbatim code block (with Python highlighting)
> def dist(x, y):
>   return sqrt(x*x + y*y)
> ~~~
>
> This is a link to [Google's home page](http://www.google.com).
>
> You can also include LaTeX mathematics either 
> inline $h = \sqrt{x^2+y^2}$ or as displayed equations:
> $$ erf(x) = \frac{1}{\sqrt{x}}\int_{-x}^x e^{-t^2} dt\,. $$
</div>

Codex uses the
[Pandoc library](http://hackage.haskell.org/package/pandoc) for
reading and rendering Markdown and [MathJaX](http://www.mathjax.org)
for displaying mathematics.
For details on the Markdown syntax accepted, check the
[Pandoc user manual](http://pandoc.org/MANUAL.html#pandocs-markdown).
Note, however, that raw HTML markup is *not* accepted (it will be
escaped and rendered as ordinary text).


## Metadata blocks

A page can also include YAML metadata blocks delimited between 3
dashes (`---`) and 3 full stops (`...`); here
is an example:

~~~~
---
author: Pedro Vasconcelos
title: A sample exercise
exercise: true
language: python
...
~~~~

Metadata blocks hey can occur anywhere, but the convention is to put
them at the start of the document.  Several metatata blocks are
equivalent to a single one with all respective fields.

Some fields (like `author` and `title`) are generic YAML metadata,
while others (like `exercise` and  `language`) are specific
to Codex. The following section describes these
in detail.


## Exercise pages

A page marked with metadata `exercise: true` is an
*exercise page*; this means that users can:

* *submit* solutions for automatic assessment;
* *get feedback* on their submissions;
* *view* past submissions and feedback;
* *edit and re-submit* past submissions.

All users can submit to all exercise pages.  Note that exercises are
identified in the submissions database by the page's *request path*
relative to the `/pub` handle; e.g. an exercise with URL
`https://server.domain/pub/foo/bar.md` is identified as `foo/bar.md`.
This means that if the exercise file name or path are modified any
previous submissions will no longer be visible.

### General fields

`title`

:      Specify a title for the exercise; if this is field missing,
       the first header is used instead.

`language`

:      Specify the programming language for this exercise.

`valid`

:      Specify valid submission time interval; the default
	   is `always` which means submissions are always valid. Some alternatives:

       - `after 08:00 15/02/2017`
       - `between 08:00 15/02/2017 and 12:00 15/02/2017`
       - `after 16/02/2017`

       Note that dates and times are interpreted relative to the server local timezone.


`feedback`

:      Specify the level of feedback to report (0-100); 0 means no feedback shown,
50 shows classifications only, 100 shows classifications and failed test cases (default).


The next fields are programming-language specific.

### Python

`doctest`

:     Specifies the file path for a doctest script for submission testing.

### Haskell and C

`quickcheck`

:     Specifies the file name for QuickCheck properties for submission testing.


`maxSuccess`

:     Number of QuickCheck tests run.

`maxSize`

:     Maximum size for QuickCheck generated test cases.

`maxDiscardRatio`

:     Maximum number of discarded tests per successful test before giving up.

`randSeed`

:     Integer seed value for pseudo-random test cases generation;
      use to ensure reproducibility of test cases.
